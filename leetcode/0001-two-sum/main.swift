/// –î–∞–Ω—ã –º–∞—Å—Å–∏–≤ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª `nums` –∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ `target`, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–µ—Ä–Ω—É—Ç—å –∏–Ω–¥–µ–∫—Å—ã –¥–≤—É—Ö —á–∏—Å–µ–ª —Ç–∞–∫–∏—Ö, —á—Ç–æ –∏—Ö —Å—É–º–º–∞ —Ä–∞–≤–Ω–∞ `target`.
/// –ú–æ–∂–Ω–æ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏—Ç—å, —á—Ç–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Ä–æ–≤–Ω–æ –æ–¥–Ω–æ —Ä–µ—à–µ–Ω–∏–µ,
/// –∏ –Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ —ç–ª–µ–º–µ–Ω—Ç –¥–≤–∞–∂–¥—ã.
/// –û—Ç–≤–µ—Ç –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –≤ –ª—é–±–æ–º –ø–æ—Ä—è–¥–∫–µ.
///
/// –ü—Ä–∏–º–µ—Ä 1:
///
/// –í—Ö–æ–¥: nums = [2,7,11,15], target = 9
/// –í—ã—Ö–æ–¥: [0,1]
/// –ü–æ—è—Å–Ω–µ–Ω–∏–µ: –ü–æ—Å–∫–æ–ª—å–∫—É nums[0] + nums[1] == 9, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º [0, 1].
///
/// –ü—Ä–∏–º–µ—Ä 2:
///
/// –í—Ö–æ–¥: nums = [3,2,4], target = 6
/// –í—ã—Ö–æ–¥: [1,2]
///
/// –ü—Ä–∏–º–µ—Ä 3:
///
/// –í—Ö–æ–¥: nums = [3,3], target = 6
/// –í—ã—Ö–æ–¥: [0,1]
///
/// –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:
///
/// - 2 <= nums.length <= 104
/// - -109 <= nums[i] <= 109
/// - -109 <= target <= 109
/// - –°—É—â–µ—Å—Ç–≤—É–µ—Ç —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç.
///
/// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –ú–æ–∂–µ—Ç–µ –ª–∏ –≤—ã –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º —Å–æ —Å–ª–æ–∂–Ω–æ—Å—Ç—å—é –º–µ–Ω–µ–µ O(n^2)?

import Foundation

class Solution {

    // –†–µ—à–µ–Ω–∏–µ 1 - –¥–≤–∞ —Ü–∏–∫–ª–∞ 

    func twoSum(_ nums: [Int], _ target: Int) -> [Int] {
        let len = nums.count
        for i in 0..<(len - 1) {
            for j in (i + 1)..<len {
                if nums[i] + nums[j] == target { return [i, j] }
            }
        }
        return []
    }

    // –†–µ—à–µ–Ω–∏–µ 2 - —Å–ª–æ–≤–∞—Ä—å –∏ –æ–¥–∏–Ω —Ü–∏–∫–ª
    
    func twoSum2(_ nums: [Int], _ target: Int) -> [Int] {
        var dict: [Int: Int] = [:]
        for (i, num) in nums.enumerated() {
            let diff = target - num
            if let j = dict[diff] {
                return [j, i]
            }
            if dict[num] == nil {
                dict[num] = i
            }
        }
        return []
    }
}

let solution = Solution()

func runTest(name: String, nums: [Int], target: Int, expected: [Int]) {
    let startTime1 = DispatchTime.now()
    let result1 = solution.twoSum(nums, target)
    let endTime1 = DispatchTime.now()
    let nanoTime1 = endTime1.uptimeNanoseconds - startTime1.uptimeNanoseconds
    let time1 = Double(nanoTime1) / 1_000_000

    let startTime2 = DispatchTime.now()
    let result2 = solution.twoSum2(nums, target)
    let endTime2 = DispatchTime.now()
    let nanoTime2 = endTime2.uptimeNanoseconds - startTime2.uptimeNanoseconds
    let time2 = Double(nanoTime2) / 1_000_000
    
    print("üß™ –¢–µ—Å—Ç: \(name)")
    print("–í—Ö–æ–¥: \(nums.count > 10 ? "–º–∞—Å—Å–∏–≤ –∏–∑ \(nums.count) —ç–ª–µ–º–µ–Ω—Ç–æ–≤" : "\(nums)"), target: \(target)")
    print("–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: \(expected)")
    
    print("twoSum —Ä–µ–∑—É–ª—å—Ç–∞—Ç: \(result1) \(result1 == expected ? "‚úÖ" : "‚ùå")")
    print("–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: \(String(format: "%.4f", time1)) –º—Å")
    
    print("twoSum2 —Ä–µ–∑—É–ª—å—Ç–∞—Ç: \(result2) \(result2 == expected ? "‚úÖ" : "‚ùå")")
    print("–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: \(String(format: "%.4f", time2)) –º—Å")
    
    if time1 > 0 && time2 > 0 {
        let ratio = time1/time2
        print("–û—Ç–Ω–æ—à–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–µ–π: twoSum2 –±—ã—Å—Ç—Ä–µ–µ –≤ \(String(format: "%.1f", ratio)) —Ä–∞–∑")
    }
    if result1 != expected || result2 != expected {
        print("!!! –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù !!!")
    }
}

runTest(name: "–ë–∞–∑–æ–≤—ã–π —Å–ª—É—á–∞–π", 
        nums: [2, 7, 11, 15], 
        target: 9, 
        expected: [0, 1])
runTest(name: "–≠–ª–µ–º–µ–Ω—Ç—ã –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ", 
        nums: [3, 2, 4], 
        target: 6, 
        expected: [1, 2])
runTest(name: "–î–≤–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–∞", 
        nums: [3, 3], 
        target: 6, 
        expected: [0, 1])
runTest(name: "–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞", 
        nums: [-1, -2, -3, -4], 
        target: -6, 
        expected: [1, 3])
runTest(name: "–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ", 
        nums: [-1, 2, 5, -3], 
        target: 1, 
        expected: [0, 1])
runTest(name: "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤", 
        nums: [1, 1], 
        target: 2, 
        expected: [0, 1])
runTest(name: "–ë–æ–ª—å—à–æ–π –º–∞—Å—Å–∏–≤", 
        nums: Array(1...10000), 
        target: 19999, 
        expected: [9998, 9999])
runTest(name: "–ù—É–ª–∏ –≤ –º–∞—Å—Å–∏–≤–µ", 
        nums: [0, 4, 3, 0], 
        target: 0, 
        expected: [0, 3])

print("\n–í—Å–µ —Ç–µ—Å—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!")