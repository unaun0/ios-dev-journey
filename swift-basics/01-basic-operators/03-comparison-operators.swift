/*
Операторы сравнения
*/

// Swift поддерживает следующие операторы сравнения:
    // Равно (a == b)
    // Не равно (a != b)
    // Больше (a > b)
    // Меньше (a < b)
    // Больше или равно (a >= b)
    // Меньше или равно (a <= b)

// Swift также предоставляет два оператора идентичности (=== и !==), которые используются для проверки того, 
// ссылаются ли две ссылки на объекты на один и тот же экземпляр объекта. 

1 == 1   // true
2 != 1   // true 
2 > 1    // true
1 < 2    // true 
1 >= 1   // true 
2 <= 1   // false

// Операторы сравнения часто используются в условных операторах, таких как оператор if

let name = "world"
if name == "world" {
    print("hello, world")
} else {
    print("I'm sorry \(name), but I don't recognize you")
}

// Можно сравнить два кортежа, если они имеют одинаковый тип и одинаковое количество значений. 
// Кортежи сравниваются слева направо, по одному значению за раз, до тех пор, пока сравнение не найдёт два неравных значения.

(1, "zebra") < (2, "apple")   // true 1 is less than 2; "zebra" and "apple" aren't compared
(3, "apple") < (3, "bird")    // true 3 is equal to 3, and "apple" is less than "bird"
(4, "dog") == (4, "dog")      // true because 4 is equal to 4, and "dog" is equal to "dog"

("blue", -1) < ("purple", 1)        // OK, evaluates to true
("blue", false) < ("purple", true)  // Error because < can't compare Boolean values

/*
Тернарный условный оператор
*/

// Тернарный условный оператор — это специальный оператор, состоящий из трёх частей, 
// который имеет вид question ? answer1 : answer2

if question {
    answer1
} else {
    answer2
}

let contentHeight = 40
let hasHeader = true
let rowHeight = contentHeight + (hasHeader ? 50 : 20) // 90

/*
Оператор объединения с нулевым значением (a ?? b) 
*/

// Оператор объединения с нулевым значением (a ?? b) разворачивает необязательный a объект, 
// если он содержит значение, или возвращает значение по умолчанию b если a является nil.
// Аналогично a != nil ? a! : b
// Если значение a не равно nil, значение b не вычисляется. Это называется вычислением по короткому замыканию.