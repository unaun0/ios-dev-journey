/// Удаляет все вхождения заданного значения из массива (in-place)
///
/// Алгоритм:
/// 1. Используем технику "двух указателей":
///    - Указатель `k` отслеживает текущую позицию для элементов ≠ val
///    - Указатель `i` проходит по всем элементам массива
/// 2. Если текущий элемент ≠ val, перемещаем его в позицию `k` и увеличиваем `k`
/// 3. Элементы после `k` могут содержать любые значения (по условию задачи не важны)
///
/// Особенности:
/// - Модифицирует исходный массив
/// - Не требует дополнительной памяти
/// - Сохраняет относительный порядок оставшихся элементов
///
/// Примеры:
/// removeElement([3,2,2,3], 3) → (k: 2, массив: [2,2,_,_])
/// removeElement([0,1,2,2,3,0,4,2], 2) → (k: 5, массив: [0,1,3,0,4,_,_,_])
///
/// - Parameters:
///   - nums: Входной массив (может быть пустым)
///   - val: Значение для удаления
/// - Returns: Количество элементов ≠ val
///
/// Сложность: O(n) по времени, O(1) по памяти

class Solution {
    func removeElement(_ nums: inout [Int], _ val: Int) -> Int {
        var k = 0
        for num in nums {
            if num != val {
                nums[k] = num
                k += 1
            }
        }
        if k < nums.count {
            nums.removeLast(nums.count - k)
        }
        return k
    }
}