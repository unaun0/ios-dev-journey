/*
Методы
*/

// Методы - это функции, которые связаны с определенным типом. 
// Классы, структуры и перечисления - все они могут определять методы экземпляра,
// которые включают в себя определенные задачи и функциональность для работы с 
// экземпляром данного типа. 

// Методы экземпляра имеют абсолютно одинаковый синтаксис как и функции

class Counter {
    var count = 0
    func increment() {
        count += 1
    }
    func increment(by amount: Int) {
        count += amount
    }
    func reset() {
        count = 0
    }
}

let counter = Counter() // начальное значение counter равно 0
counter.increment() // теперь значение counter равно 1
counter.increment(by: 5) // теперь значение counter равно 6
counter.reset() // теперь значение counter равно 0

/*
Свойство self
*/

// Каждый экземпляр типа имеет неявное свойство self, 
// которое является абсолютным эквивалентом самому экземпляру. 
// Вы используете свойство self для ссылки на текущий экземпляр, 
// внутри методов этого экземпляра.

// func increment() {
//    self.count += 1
//}

// Если вы не пишете self, то Swift полагает, что вы ссылаетесь на свойство или 
// метод текущего экземпляра каждый раз, когда вы используете известное 
// имя свойства или метода внутри метода.

// Главное исключение из этого правила получается, когда имя параметра метода 
// экземпляра совпадает с именем свойства экземпляра. В этой ситуации имя 
// параметра имеет приоритет и появляется необходимость ссылаться на свойство 
// в более подходящей форме. 

struct Point {
    var x = 0.0, y = 0.0
    func isToTheRightOf(x: Double) -> Bool {
        return self.x > x
    }
}
let somePoint = Point(x: 4.0, y: 5.0)
if somePoint.isToTheRightOf(x: 1.0) {
    print("Эта точка находится справа")
} // "Эта точка находится справа от линии, где x == 1.0"

// Без префикса self, Swift будет думать, что в обоих случаях x будет как раз 
// параметром метода, который так же называется x.

