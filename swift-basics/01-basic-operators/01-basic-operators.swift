/*
Основные операторы
*/

// Оператор — это специальный символ или фраза, которые используются для проверки, 
// изменения или объединения значений.

// Операторы бывают унарными, двоичными или тернарными:
    // Унарные операторы работают с одним объектом. 
    // Унарные префиксные операторы появляются непосредственно перед объектом (например, !b), 
    // а унарные постфиксные операторы появляются непосредственно после объекта (например, c!).

    // Бинарные операторы работают с двумя объектами и являются инфиксными, 
    // потому что располагаются между двумя объектами.
    
    // Тернарные операторы работают с тремя объектами. 
    // В Swift есть только один тернарный оператор — тернарный условный оператор (a ? b : c).

/*
Оператор присваивания
*/

// Оператор присваивания (a = b) инициализирует или обновляет значение a значением b

let b = 10
var a = 5
a = b

// Если в правой части присваивания находится кортеж с несколькими значениями, его элементы 
// можно разделить на несколько констант или переменных одновременно

let (x, y) = (1, 2)

// В отличие от оператора присваивания в C и Objective-C, оператор присваивания в Swift 
// сам по себе не возвращает значение. Следующее утверждение неверно:

// if x = y {
    // ...
// }

/*
Арифметические операторы
*/

// Swift поддерживает четыре стандартных арифметических оператора для всех типов чисел:
    // Сложение (+)
    // Вычитание (-)
    // Умножение (*)
    // Деление (/)

1 + 2  // 3
5 - 3  // 2
2 * 3  // 6
10.0 / 2.5  // 4.0

// Aрифметические операторы Swift по умолчанию не допускают переполнения значений. 
// Вы можете включить поведение при переполнении значений, используя операторы переполнения.

// Swift предоставляет три арифметических оператора переполнения, 
// которые выбирают поведение при переполнении для целочисленных вычислений. 
// Все эти операторы начинаются с амперсанда (&): &+; &-; &*

// Числа могут переполняться как в положительном, так и в отрицательном направлении.

var unsignedOverflow = UInt8.max // 255
unsignedOverflow = unsignedOverflow &+ 1 // 0

// Переменная unsignedOverflow инициализируется максимальным значением, которое может 
// содержать UInt8 (255, или 11111111 в двоичной системе). Затем она увеличивается на 1 
// с помощью оператора переполнения (&+). 
// Это приводит к тому, что её двоичное представление выходит за пределы размера, 
// который может содержать UInt8, что приводит к переполнению, как показано на схеме ниже. 
// Значение, которое остаётся в пределах UInt8 после переполнения, равно 00000000, или нулю.

var unsignedOverflow = UInt8.min // 0
unsignedOverflow = unsignedOverflow &- 1 // 255

// Оператор сложения также поддерживается для конкатенации строк

"hello, " + "world"  // "hello, world"

/*
Оператор остатка
*/

// Оператор остатка (a % b) вычисляет, сколько кратных b поместится в a и возвращает 
// оставшееся значение (известное как остаток).

9 % 4 // 1
-9 % 4 // -1

/*
Унарный минус - оператор
*/

let three = 3
let minusThree = -three       //  -3
let plusThree = -minusThree   // --3 = 3

/*
Унарный плюс - оператор
*/

// Унарный оператор плюс (+) просто возвращает значение, с которым он работает, без каких-либо изменений
let minusSix = -6
let alsoMinusSix = +minusSix  // -6
