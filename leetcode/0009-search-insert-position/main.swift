/// Находит позицию target в отсортированном массиве или индекс для вставки
///
/// Алгоритм использует бинарный поиск для достижения O(log n) сложности.
/// Массив должен быть отсортирован по возрастанию и содержать уникальные элементы.
///
/// Принцип работы:
/// 1. Если target найден в массиве - возвращается его индекс
/// 2. Если target не найден - возвращается позиция, куда его можно вставить,
///    чтобы сохранить порядок сортировки
///
/// Примеры:
/// searchInsert([1,3,5,6], 5) → 2  (target найден)
/// searchInsert([1,3,5,6], 2) → 1  (место для вставки между 1 и 3)
/// searchInsert([1,3,5,6], 7) → 4  (место в конце массива)
///
/// - Parameters:
///   - nums: Отсортированный массив уникальных целых чисел
///   - target: Искомое значение
/// - Returns: Индекс target или позиция для вставки
///
/// Сложность: O(log n) - бинарный поиск

class Solution {
    func searchInsert(_ nums: [Int], _ target: Int) -> Int {
        var left = 0
        var right = nums.count - 1
        while left <= right {
            let mid = left + (right - left) / 2
            if nums[mid] == target {
                return mid
            } else if nums[mid] < target {
                left = mid + 1
            } else {
                right = mid - 1
            }
        }
        return left
    }
}