// Условие задачи:
// Дан массив nums размером n. Необходимо найти мажоритарный элемент — элемент, 
// который встречается в массиве более чем ⌊n / 2⌋ раз. 
// Можно считать, что такой элемент всегда существует.
//
// Примеры:
//
// Пример 1:
//
// Вход: nums = [3,2,3]
// Выход: 3
// Элемент 3 встречается 2 раза из 3 (2 > ⌊3/2⌋ = 1).
//
// Пример 2:
//
// Вход: nums = [2,2,1,1,1,2,2]
// Выход: 2
// Элемент 2 встречается 4 раза из 7 (4 > ⌊7/2⌋ = 3).
//
// Ограничения:
//
// n == nums.length
// 1 <= n <= 5 * 10^4
// -10^9 <= nums[i] <= 10^9
//
// Можно ли решить задачу за O(n) времени и O(1) памяти?

// Алгоритм Бойера-Мура - алгоритм "голосования" находит элемент, 
// который встречается чаще всех, используя O(1) памяти.

func majorityElement(_ nums: [Int]) -> Int {
    var candidate = nums[0]
    var count = 1
    for num in nums.dropFirst() {
        if count == 0 {
            candidate = num
            count = 1
        } else if num == candidate {
            count += 1
        } else {
            count -= 1
        }
    }
    return candidate
}