/// Даны массив целых чисел `nums` и целое число `target`, необходимо вернуть индексы двух чисел таких, что их сумма равна `target`.
/// Можно предположить, что для каждого набора входных данных существует ровно одно решение,
/// и нельзя использовать один и тот же элемент дважды.
/// Ответ можно вернуть в любом порядке.
///
/// Пример 1:
///
/// Вход: nums = [2,7,11,15], target = 9
/// Выход: [0,1]
/// Пояснение: Поскольку nums[0] + nums[1] == 9, возвращаем [0, 1].
///
/// Пример 2:
///
/// Вход: nums = [3,2,4], target = 6
/// Выход: [1,2]
///
/// Пример 3:
///
/// Вход: nums = [3,3], target = 6
/// Выход: [0,1]
///
/// Ограничения:
///
/// - 2 <= nums.length <= 104
/// - -109 <= nums[i] <= 109
/// - -109 <= target <= 109
/// - Существует только один верный ответ.
///
/// Дополнительно: Можете ли вы предложить алгоритм со сложностью менее O(n^2)?

import Foundation

class Solution {

    // Решение 1 - два цикла 

    func twoSum(_ nums: [Int], _ target: Int) -> [Int] {
        let len = nums.count
        for i in 0..<(len - 1) {
            for j in (i + 1)..<len {
                if nums[i] + nums[j] == target { return [i, j] }
            }
        }
        return []
    }

    // Решение 2 - словарь и один цикл
    
    func twoSum2(_ nums: [Int], _ target: Int) -> [Int] {
        var dict: [Int: Int] = [:]
        for (i, num) in nums.enumerated() {
            let diff = target - num
            if let j = dict[diff] {
                return [j, i]
            }
            if dict[num] == nil {
                dict[num] = i
            }
        }
        return []
    }
}