/*
Исходные значения
*/

// В примере с Barcode в главе “Ассоциативные значения” можно увидеть как кейсы перечисления могут объявлять значения различных типов, 
// которые они могут хранить.
// Как альтернатива ассоциативным значениям, кейсы перечисления могут иметь начальные значения (называются “исходными значениями”), 
// которые всегда одного типа.

enum ASCIIControlCharacter: Character {
    case tab = "\t"
    case lineFeed = "\n"
    case carriageReturn = "\r"
}

// Исходные значения могут быть строками, символами или любым целым числом или числом с плавающей точкой. 
// Каждое исходное значение должно быть уникальным при его объявлении.

// Исходные значения устанавливаются в качестве дефолтных значений

/*
Неявно установленные исходные значения
*/

enum Planet: Int {
    case mercury = 1, venus, earth, mars, jupiter, saturn, uranus, neptune
}

// В приведенном выше примере, Planet.mercury имеет явное исходное значение 1, 
// Planet.venus имеет неявное исходное значение 2, и так далее.

// Когда строки используются в качестве исходных значений, неявное значение для каждого кейса является текстом имени этого кейса.

enum CompassPoint: String {
    case north, south, east, west
}

// В приведенном выше примере, CompassPoint.south имеет неявное исходное значение "south" и так далее.

// Для доступа к исходному значению кейса перечисления существует свойство rawValue

let earthsOrder = Planet.earth.rawValue // 3
 
let sunsetDirection = CompassPoint.west.rawValue // "west"

/*
Инициализация через исходное значение
*/

let possiblePlanet = Planet(rawValue: 7)
print(possiblePlanet ?? "")

// Если вы попытаетесь найти планету с номером позицией 11, то значение опциональной Planet, 
// возвращенное исходным значением инициализатора, будет nil

