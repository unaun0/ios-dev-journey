// Вам дан массив prices, где prices[i] представляет цену акции на i-й день.
// Вам нужно максимизировать прибыль, выбрав один день для покупки акции и другой день 
// в будущем для её продажи.
// Верните максимально возможную прибыль от этой операции. Если прибыль получить невозможно, верните 0.
//
// Пример 1:
// Входные данные: prices = [7, 1, 5, 3, 6, 4]
// Выходные данные: 5
// Объяснение:
// Покупаем на 2-й день (цена = 1).
// Продаём на 5-й день (цена = 6).
// Прибыль = 6 - 1 = 5.
// Примечание:
// Покупка на 2-й день и продажа на 1-й день невозможна, потому что продажа должна происходить после покупки.
//
// Пример 2:
// Входные данные: prices = [7, 6, 4, 3, 1]
// Выходные данные: 0
// Объяснение:
// В этом случае невозможно получить прибыль, поэтому максимальная прибыль = 0.
//
// Ограничения:
//
// 1 <= prices.length <= 10^5
// 0 <= prices[i] <= 10^4
// Формулировка задачи простыми словами
//
// Нужно найти два дня:
//
// День покупки — когда цена акции минимальна.
// День продажи — который идёт после дня покупки, и цена в этот день максимально возможная.
// Разница между ценой продажи и покупки даст максимальную прибыль. 
// Если цены только падают (как во втором примере), прибыль невозможна, и ответ 0.

class Solution {
    func maxProfit(_ prices: [Int]) -> Int {
        var minPrice = Int.max
        var maxProfit = 0
        
        for price in prices {
            if price < minPrice {
                minPrice = price
            } else if price - minPrice > maxProfit {
                maxProfit = price - minPrice
            }
        }
        return maxProfit
    }
}