/*
Ассоциативные значения
*/

// Вы можете объявить перечисления Swift для хранения ассоциативных значений любого необходимого типа, 
// и типы значений могут отличаться для каждого члена перечисления, если это необходимо. 

// Для примера, предположим систему инвентаризации, которая должна отслеживать товар двумя различными типами штрих-кодов.

// Одни товары имеют коды типа 1D формата UPC-A, которые используют цифры от 0 до 9. 
// Каждый штрих-код имеет свою “систему цифр”, где идут пять цифр “кода производителя” и пять цифр “кода продукта”. 
// Затем идет “проверочная” цифра, которая проверяет, что код был отсканирован корректно

// Другие продукты имеют маркировку штрих-кодом 2D формата QR, который может использовать любой символ 
// из ISO 8859–1 и может закодировать строку длиною 2953 символа

// Было бы удобно, если бы система контроля и учета товара могла бы хранить штрих-коды формата UPC-A, 
// как кортеж из четырех целых чисел и QR код, как строку любой длины.

enum Barcode {
    case upc(Int, Int, Int, Int)
    case qrCode(String)
}

// Объявление не дает никакого значения типа Int или String, оно лишь определяет типы ассоциативных значений

var productBarcode = Barcode.upc(8, 85909, 51226, 3)
var productQRCode = Barcode.qrCode("http://www.apple.com")

switch productBarcode {
    case .upc(let numberSystem, let manufacturer, let product, let check):
        print("UPC: \(numberSystem), \(manufacturer), \(product), \(check).")
    case .qrCode(let productCode):
        print("QR code: \(productCode).")
}