// Условие задачи:
// Дан отсортированный массив целых чисел nums в порядке неубывания. 
// Необходимо удалить дубликаты на месте (in-place) таким образом, 
// чтобы каждый уникальный элемент встречался не более двух раз. 
// Относительный порядок элементов должен быть сохранен.
// Поскольку в некоторых языках невозможно изменить длину массива, 
// результат должен быть размещен в первой части массива nums.
//
// Формально, если после удаления дубликатов осталось k элементов, 
// то первые k элементов nums должны содержать итоговый результат. 
// Элементы после k-й позиции не важны.
//
// Необходимо вернуть число k после размещения итогового результата в первых k позициях массива nums.
//
// Важно:
//
// Нельзя использовать дополнительную память (только O(1) дополнительной памяти)
// Модификация должна быть выполнена на месте (in-place)
// Примеры:
//
// Пример 1:
//
// Вход: nums = [1,1,1,2,2,3]
// Выход: 5, nums = [1,1,2,2,3,_]
// Объяснение: Функция должна вернуть k = 5, при этом первые пять элементов массива nums должны быть [1,1,2,2,3]. 
// Элементы после пятой позиции не важны (обозначены символом _).
//
// Пример 2:
//
// Вход: nums = [0,0,1,1,1,1,2,3,3]
// Выход: 7, nums = [0,0,1,1,2,3,3,_,_]
// Объяснение: Функция должна вернуть k = 7, 
// при этом первые семь элементов массива nums должны быть [0,0,1,1,2,3,3].
//
// Ограничения:
//
// Длина массива: 1 <= nums.length <= 3 * 10^4
// Значения элементов: -10^4 <= nums[i] <= 10^4
// Массив nums отсортирован в порядке неубывания
// Дополнительное требование:
//
// Решение должно работать за O(n) времени и использовать O(1) дополнительной памяти.
//
// Комментарии к решению:
//
// Ключевая идея: Использовать технику двух указателей (медленный и быстрый)
// Счетчик дубликатов: Следить, чтобы каждый элемент встречался не более 2 раз

func removeDuplicates(_ nums: inout [Int]) -> Int {
    guard nums.count > 2 else { return nums.count }
    var k = 2
    for i in 2..<nums.count {
        print(i, k)
        if nums[i] != nums[k-2] {
            nums[k] = nums[i]
            k += 1
        }
    }
    if k < nums.count {
        nums.removeLast(nums.count - k)
    }
    return k
}

var n = [1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9]
print(removeDuplicates(&n))
print(n)
