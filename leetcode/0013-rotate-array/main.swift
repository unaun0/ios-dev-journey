// Дан массив целых чисел nums. Необходимо повернуть его вправо на k шагов, где k — неотрицательное число.
//
// Пример 1:
// Вход: nums = [1,2,3,4,5,6,7], k = 3
// Выход: [5,6,7,1,2,3,4]
// Объяснение:
// Поворот на 1 шаг вправо: [7,1,2,3,4,5,6]
// Поворот на 2 шага вправо: [6,7,1,2,3,4,5]
// Поворот на 3 шага вправо: [5,6,7,1,2,3,4]
//
// Пример 2:
// Вход: nums = [-1,-100,3,99], k = 2
// Выход: [3,99,-1,-100]
// Объяснение:
// Поворот на 1 шаг вправо: [99,-1,-100,3]
// Поворот на 2 шага вправо: [3,99,-1,-100]
//
// Ограничения:
//
// 1 <= nums.length <= 10^5
// -2^31 <= nums[i] <= 2^31 - 1
// 0 <= k <= 10^5
// Дополнительно:
//
// Попробуйте придумать как можно больше решений. Существует как минимум три разных способа решить эту задачу.
// Можете ли вы сделать это на месте (in-place) с использованием O(1) дополнительной памяти?

class Solution {
    func rotate(_ nums: inout [Int], _ k: Int) {
        let n = nums.count
        let k = k % n

        func reverse(_ start: Int, _ end: Int) {
            var start = start
            var end = end
            while start < end {
                nums.swapAt(start, end)
                start += 1
                end -= 1
            }
        }
        reverse(0, n - 1)
        reverse(0, k - 1)
        reverse(k, n - 1)
    }
}