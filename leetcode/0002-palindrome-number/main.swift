/// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–º.
///
/// –ü–∞–ª–∏–Ω–¥—Ä–æ–º - —ç—Ç–æ —á–∏—Å–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ —á–∏—Ç–∞–µ—Ç—Å—è –æ–¥–∏–Ω–∞–∫–æ–≤–æ
/// –∫–∞–∫ —Å–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ, —Ç–∞–∫ –∏ —Å–ø—Ä–∞–≤–∞ –Ω–∞–ª–µ–≤–æ.
///
/// - Parameters:
///   - x: –¶–µ–ª–æ–µ —á–∏—Å–ª–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
/// - Returns: `true`, –µ—Å–ª–∏ —á–∏—Å–ª–æ —è–≤–ª—è–µ—Ç—Å—è –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–º, –∏–Ω–∞—á–µ `false`
///
/// # –ü—Ä–∏–º–µ—Ä—ã:
/// ```
/// isPalindrome(121)   // ‚Üí true (121 —á–∏—Ç–∞–µ—Ç—Å—è –æ–¥–∏–Ω–∞–∫–æ–≤–æ –≤ –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã)
/// isPalindrome(-121)  // ‚Üí false ("-121" != "121-")
/// isPalindrome(10)    // ‚Üí false ("10" != "01")
/// ```
///
/// # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:
/// - -2^31 <= x <= 2^31 - 1
///
/// # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:
/// –†–µ—à–µ–Ω–∏–µ –±–µ–∑ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —á–∏—Å–ª–∞ –≤ —Å—Ç—Ä–æ–∫—É

class Solution {
    func isPalindrome(_ x: Int) -> Bool {
        if x < 0 {
            return false
        }
        if x != 0, x % 10 == 0 {
            return false
        }
        var orig = x
        var reversed = 0
        while orig > reversed {
            reversed = reversed * 10 + orig % 10
            orig /= 10
        }
        return orig == reversed || orig == reversed / 10
    }
}

let solution = Solution()

func testPalindrome(_ x: Int, expected: Bool) {
    let result = solution.isPalindrome(x)
    let status = result == expected ? "‚úÖ" : "‚ùå"
    print("üß™ –¢–µ—Å—Ç –¥–ª—è \(x): \(status)\n\t(–æ–∂–∏–¥–∞–ª–æ—Å—å: \(expected), –ø–æ–ª—É—á–∏–ª–∏: \(result))")
}

testPalindrome(1, expected: true)        // –û–¥–Ω–æ–∑–Ω–∞—á–Ω–æ–µ —á–∏—Å–ª–æ
testPalindrome(11, expected: true)       // –î–≤—É–∑–Ω–∞—á–Ω–æ–µ –ø–∞–ª–∏–Ω–¥—Ä–æ–º
testPalindrome(10, expected: false)      // –î–≤—É–∑–Ω–∞—á–Ω–æ–µ –Ω–µ –ø–∞–ª–∏–Ω–¥—Ä–æ–º
testPalindrome(101, expected: true)      // –¢—Ä–µ—Ö–∑–Ω–∞—á–Ω—ã–π –ø–∞–ª–∏–Ω–¥—Ä–æ–º
testPalindrome(0, expected: true)        // –ù–æ–ª—å
testPalindrome(234, expected: false)     // –¢—Ä–µ—Ö–∑–Ω–∞—á–Ω–æ–µ –Ω–µ –ø–∞–ª–∏–Ω–¥—Ä–æ–º
testPalindrome(-121, expected: false)    // –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ
testPalindrome(12321, expected: true)    // –ù–µ—á–µ—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ñ—Ä
testPalindrome(1221, expected: true)     // –ß–µ—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ñ—Ä
testPalindrome(1001, expected: true)     // –ü–∞–ª–∏–Ω–¥—Ä–æ–º —Å –Ω—É–ª—è–º–∏
testPalindrome(1234321, expected: true)  // –ë–æ–ª—å—à–æ–π –ø–∞–ª–∏–Ω–¥—Ä–æ–º
testPalindrome(Int.max, expected: false) // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ Int
testPalindrome(Int.min, expected: false) // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ Int