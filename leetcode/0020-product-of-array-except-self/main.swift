// Дан массив целых чисел nums. Необходимо вернуть массив answer, 
// где каждый элемент answer[i] равен произведению всех элементов массива nums, 
// кроме nums[i].

// Произведение любого префикса или суффикса массива гарантированно помещается 
// в 32-битное целое число.
// Алгоритм должен работать за O(n) времени и без использования операции деления.

// Пример 1:

// Ввод: nums = [1, 2, 3, 4]
// Вывод: [24, 12, 8, 6]
// Объяснение:
// Для answer[0]: 2 * 3 * 4 = 24
// Для answer[1]: 1 * 3 * 4 = 12
// Для answer[2]: 1 * 2 * 4 = 8
// Для answer[3]: 1 * 2 * 3 = 6

// Пример 2:

// Ввод: nums = [-1, 1, 0, -3, 3]
// Вывод: [0, 0, 9, 0, 0]
// Объяснение:
// Для answer[2]: -1 * 1 * -3 * 3 = 9 (все остальные элементы содержат 0 в произведении)

// Ограничения:

// Длина массива: 2 <= nums.length <= 10^5
// Значения элементов: -30 <= nums[i] <= 30
// Гарантируется, что answer[i] помещается в 32-битное целое число.

// Дополнительное условие:
// Можно ли решить задачу с дополнительной памятью O(1)? 
// (Выходной массив не учитывается в расчёте сложности по памяти.)

class Solution {
    func productExceptSelf(_ nums: [Int]) -> [Int] {
        let n = nums.count
        var answer = [Int](repeating: 0, count: n)
        
        var leftProduct = 1
        for i in 0..<n {
            answer[i] = leftProduct
            leftProduct *= nums[i]
        }

        var rightProduct = 1
        for i in (0..<n).reversed() {
            answer[i] *= rightProduct
            rightProduct *= nums[i]
        }
        
        return answer
    }
}